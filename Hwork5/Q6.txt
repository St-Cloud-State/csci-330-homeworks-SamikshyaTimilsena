(defparameter *input* nil)
(defparameter *position* 0)

(defun peek ()
  (if (< *position* (length *input*))
      (char *input* *position*)
      nil))

(defun consume (expected)
  (if (and (< *position* (length *input*))
           (char= expected (char *input* *position*)))
      (progn (incf *position*) t)
      nil))

(defun parse-I ()
  (when (consume #\i)
    (parse-E)
    (parse-S)
    (parse-I')))

(defun parse-I' ()
  (when (char= (peek) #\e)
    (consume #\e)
    (parse-S)))

(defun parse-E ()
  (parse-G)
  (parse-E'))

(defun parse-E' ()
  (when (char= (peek) #\o)
    (consume #\o)
    (parse-G)
    (parse-E')))

(defun parse-G ()
  (if (member (peek) '(#\x #\y #\z #\w))
      (consume (peek))
      (error "Expected x, y, z, or w")))

(defun parse-S ()
  (if (consume #\s)
      t
      (when (consume #\d)
        (parse-L)
        (consume #\b))))

(defun parse-L ()
  (consume #\s)
  (when (char= (peek) #\s)
    (parse-L)))

(defun parse (input-string)
  (setf *input* input-string *position* 0)
  (parse-I)
  (if (= *position* (length *input*))
      (format t "Accepted: ~A~%" input-string)
      (format t "Rejected: ~A~%" input-string)))
